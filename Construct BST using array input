#include <iostream>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) {
        val = value;
        left = right = NULL;
    }
};

//Function to insert into BST
TreeNode* insertBST(TreeNode* root, int value) {
    if (root == NULL) {
        return new TreeNode(value);
    }

    if (value < root->val) {
        root->left = insertBST(root->left, value);
    } else {
        root->right = insertBST(root->right, value);
    }

    return root;
}

//Inorder traversal to check BST structure
void inorder(TreeNode* root) {
    if (root == NULL) return;
    inorder(root->left);
    cout << root->val << " ";
    inorder(root->right);
}

int main() {
    int arr[] = {10, 5, 15, 2, 7, 12, 20};
    int n = sizeof(arr) / sizeof(arr[0]);

    TreeNode* root = NULL;

    //Insert each element into the BST
    for (int i = 0; i < n; i++) {
        root = insertBST(root, arr[i]);
    }

    //Print inorder to confirm BST
    cout << "Inorder Traversal of BST: ";
    inorder(root);

    return 0;
}
